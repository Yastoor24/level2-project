pipeline {
  agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    service_name: department-service
    service_type: REST
spec:
  containers:
  - name: dnd
    image: docker:latest
    command: 
    - cat
    tty: true
    volumeMounts: 
    - mountPath: /var/run/docker.sock
      name: docker-sock
  - name: kubectl
    image: bryandollery/terraform-packer-aws-alpine
    command:
    - cat
    tty: true
  volumes:
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock  
      type: Socket
"""
    }
  }
  environment {
    CREDS = credentials('yaser_docker_creds')
    DOCKER_NAMESPACE = 'yastoor24'
    SERVICE_NAME = 'department-service'
    TOKEN=credentials('b02bdca3-56ab-4e5f-8aba-ad53a0d430a0')
  }
  stages {
      stage("debug") {
          steps {
              container('kubectl') {
                  sh '''
                      cd $SERVICE_NAME
                      env
                      kubectl --server="https://kubernetes" --insecure-skip-tls-verify=true --token=$TOKEN -n tester get all
                  '''
              }
          }
      }
      stage("Build") {
          steps {
              container('dnd') {
                  sh '''
                      cd $SERVICE_NAME
                      docker build --tag $DOCKER_NAMESPACE/$SERVICE_NAME .
                  '''
              }
          }
      }
      stage("Release") {
          steps {
              container('dnd') {
                  sh '''
                      docker login -p $CREDS_PSW -u $CREDS_USR
                      docker push $DOCKER_NAMESPACE/$SERVICE_NAME
                  '''
              }
          }
      }
      stage("Deploy") {
          steps {
              container('kubectl') {
                  sh '''
                      cd $SERVICE_NAME
                      kubectl --token=$TOKEN -n tester get all
                      kubectl --token=$TOKEN -n jenkins apply -f deploy.yaml -f service.yaml
                      kubectl --token=$TOKEN -n tester get all
                  '''
              }
          }
      }
  }
}
